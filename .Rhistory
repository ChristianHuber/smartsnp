dataSNP <- matrix(sampleSNP, nrow = snpN, ncol = sampleN); dim(mat2) # dataset (columns = 100 samples, rows = 10000 SNP)
dataSNP <- matrix(sampleSNP, nrow = snpN, ncol = sampleN); dim(dataSNP) # dataset (columns = 100 samples, rows = 10000 SNP)
# Save data to working directory
write.table(dataSNP, file = "dataSNP", col.names = FALSE, row.names = FALSE) # save data set to working directory
dataSNP <- matrix(sampleSNP, nrow = snpN, ncol = sampleN); dim(dataSNP) # dataset (columns = 100 samples, rows = 10000 SNP)
my_groups <- c(rep("A", 50), rep("B", 50)) # assign 50 samples to each of two groups
my_groups
smart_pca(snp_data = dataSNP)#, sample_group = my_groups)
smart_pca(snp_data = dataSNP, sample_group = my_groups)#, sample_group = my_groups)
smart_pca(snp_data = "dataSNP.txt", sample_group = sample_group, sample_project = my_ancient)
smart_pca(snp_data = "dataSNP.txt", sample_group = my_groups)#, sample_group = my_groups)
getwd()
smart_pca(snp_data = "dataSNP.txt", sample_group = my_groups)#, sample_group = my_groups)
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
smart_pca(snp_data = dataSNP, sample_group = my_groups)
my_ancient <- c(1:10, 51:50) # samples 1st to 10th per group assigned to "ancient"
smart_pca(snp_data = "dataSNP", sample_group = sample_group, sample_project = my_ancient)
smart_pca(snp_data = "dataSNP", sample_group = my_group, sample_project = my_ancient)
smart_pca(snp_data = "dataSNP", sample_group = my_groups, sample_project = my_ancient)
#Example 2: smartpca on modern and ancient samples (ancient samples projected onto modern PCA space)
my_ancient <- c(1:10, 51:60) # samples 1st to 10th per group assigned to "ancient"
smart_pca(snp_data = "dataSNP", sample_group = my_groups, sample_project = my_ancient)
setwd("/Users/salvador/Desktop/smartsnpFiles")
source("module1_smart_pca_beta.R")
my_groups <- c(rep("A", 50), rep("B", 50)) # assign 50 samples to each of two groups
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
library(admixtools); library(bootSVD); library(data.table); library(foreach); library(ggrepel)
library(Rfast); library(RSpectra); library(vegan); library(vroom)
source("module1_smart_pca_beta.R")
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
source("module1_smart_mva_beta.R")
source("module0_smart_mva_beta.R")
smart_mva(snp_data = "dataSNP", sample_group = my_groups)
source("module2_smart_permanova_beta.R")
ex <- smart_pemanova(snp_data = "dataSNP", sample_group = my_groups)
ex <- smart_permanova(snp_data = "dataSNP", sample_group = my_groups)
ex
source("module0_smart_mva_beta.R")
ex <- smart_mva(snp_data = "dataSNP", sample_group = my_groups)
ex
source("module2_smart_permanova_beta.R")
ex <- smart_permanova(snp_data = "dataSNP", sample_group = my_groups)
ex
source("module3_smart_permadisp_beta.R")
source("module3_smart_permdisp_beta.R")
ex <- smart_permdisp(snp_data = "dataSNP", sample_group = my_groups)
ex
library(devtools) #load
spell_check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
ls()
?smart_pca
devtools::document()
devtools::load_all()
getwd()
library(admixtools); library(bootSVD); library(data.table); library(foreach); library(ggrepel)
library(Rfast); library(RSpectra); library(vegan); library(vroom)
setwd("/Users/salvador/Desktop/smartsnpFiles")
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue") # assign 50 samples to each of two groups and colours
pcaR1 <- smart_pca(snp_data = "dataSNP", sample_group = my_groups)
mvaR <- smart_mva(snp_data = "dataSNP", sample_group = my_groups)
# Run PERMANOVA for PCA 1 x PCA 2
permanovaR <- smart_permanova(snp_data = "dataSNP", sample_group = my_groups, target_space = "pca") # run
permdispR <- smart_permdisp(snp_data = "dataSNP", sample_group = my_groups)
usethis::use_package()
devtools::document()
library(devtools)
?document
document()
getwd
getwd()
setwd("/Users/salvador/Desktop/smartsnp")
document()
roxygen::oxygenize("smartsnp")
roxygen2::oxygenize("smartsnp")
library(vegan)
?vegdist
devtools::check()
devtools::check()
devtools::check()
?foreach
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
check_win()
devtools::check_win()
??check_win
??check_win_devel()
devtools::check()
install.packages("installr")
update.packages(ask = FALSE)
# Quality check
devtools::check()
library(devtools)
library(vegan)
install.packages("vegan")
install.packages(data.table)
install.packages('data.table')
install.packages('rcarbon')
install.packages('foreach')
install.packages('ggrepel')
install.packages('Rfast')
install.packages('RSpectra')
install.packages('vroom')
install.packages("devtools")
devtools::install_github("bodkan/admixr")
install.packages("tidyverse")
install.packages("vegan")
# Quality check
devtools::check()
install.packages("bootSVD")
# Quality check
devtools::check()
library(admixr)
devtools::install_github("uqrmaie1/admixtools")
# Quality check
devtools::check()
#Check versions
devtools::release()
#Grammar and spelling
devtools::spell_check() #check spelling
#Grammar and spelling
devtools::spell_check() #check spelling
#Grammar and spelling
devtools::check()
#Check versions
devtools::release()
#Check versions
devtools::release()
devtools::check_win_devel()
roxygen2::roxygenize()
devtools::check_win_devel()
#Check versions
devtools::release()
devtools::check()
devtools::check()
dataSNP <- read.table("~/Desktop/dataSNP.txt")
dataSNP <- read.table("~/Desktop/dataSNP")
save(dataSNP, "/data/dataSNP.Rdata")
save("/data/dataSNP.Rdata", dataSNP)
?save
save(dataSNP, file = "/data/dataSNP.Rdata")
getwd()
save(dataSNP, file = "./data/dataSNP.Rdata")
?load
library(ggplot2)
data(mtcars)
View(mtcars)
release()
library(devtools)
release()
check_rhub()
submit_cran()
usethis::use_rcpp()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(Rcpp)
getwd()
roxygen2::roxygenize()
Rcpp::compileAttributes()
load("/Users/salvador/Desktop/smartsnp/data/dataSNP.Rdata")
data(dataSNP)
ls()
dataSNP
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
# Quality check
devtools::check()
data(smartSnP)
data(smartSNP)
data(dataSNP)
#load package then try functions
devtools::load_all()
ls()
dataSNP
smart_pca(dataSNP)
my_groups <- as.factor(c(rep("A", 50), rep("B", 50))); cols = c("red", "blue")
smart_pca(dataSNP, sample_group = my_groups)
smart_pca(dataSNP, sample_group = my_groups)
roxygen2::roxygenize()
# Quality check
devtools::check()
# Quality check
devtools::check()
roxygen2::roxygenize()
# Quality check
devtools::check()
roxygen2::roxygenize()
# Quality check
devtools::check()
roxygen2::roxygenize()
# Quality check
devtools::check()
roxygen2::roxygenize()
# Quality check
devtools::check()
#load package then try functions
devtools::load_all()
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue")
# Simulate data
cellN <- 1e06; sampleN <- 100; snpN <- cellN/sampleN # parameters to simulate dataset
#random sample of genotypes /0|1|2/ and missing values /9/
sampleSNP <- sample(x = c(0,1,2,9), size = cellN, replace = TRUE, prob=c(0.33,0.33,0.33,0.01))
#build dataset
dataSNP <- matrix(sampleSNP, nrow = snpN, ncol = sampleN)
dim(dataSNP)
# Save data to working directory
write.table(dataSNP, file = "dataSNP", col.names = FALSE, row.names = FALSE)
getwd()
smart_pca("dataSNP")
smart_pca("dataSNP")
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue")
smart_pca("dataSNP", sample_group = my_groups)
roxygen2::roxygenize()
# Quality check
devtools::check()
# Quality check
devtools::check()
devtools::check()
roxygen2::roxygenate
roxygen2::roxygenize()
devtools::check()
x <- sample(1000)
?use_this
?use_this::use_data
getwd()
# Data parameters
cellN <- 1e06; sampleN <- 100; snpN <- cellN/sampleN # parameters to simulate dataset
# Random sample of genotypes /0|1|2/ and missing values /9/
sampleSNP <- sample(x = c(0,1,2,9), size = cellN, replace = TRUE, prob=c(0.33,0.33,0.33,0.01))
# Build dataset
dataSNP <- matrix(sampleSNP, nrow = snpN, ncol = sampleN)
dim(dataSNP)
# Save data to working directory
write.table(dataSNP, file = "data-raw/dataSNP", col.names = FALSE, row.names = FALSE)
# Simulate data
library(usethis)
usethis::use_data(dataSNP)
#load package then try functions
devtools::load_all()
smart_pca
data(dataSNP)
dataSNP
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue")
smart_pca(snp_data = dataSNP, sample_group = my_groups)
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
dataSNP
smart_pca(snp_data = "data/dataSNP", sample_group = my_groups)
smart_pca(snp_data = "data/dataSNP.rda", sample_group = my_groups)
smart_pca(snp_data = "dataSNP.rda", sample_group = my_groups)
smart_pca(snp_data = "data/dataSNP.R", sample_group = my_groups)
smart_pca(snp_data = "data/dataSNP", sample_group = my_groups)
smart_pca(snp_data = dataSNP, sample_group = my_groups)
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
getwd()
smart_pca(snp_data = "/raw-data/dataSNP", sample_group = my_groups)
setwd"/raw-data"
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
data(dataSNP)
ls()
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
setwd("/Users/salvador/Desktop/smartsnp/data-raw")
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
setwd("/smartsnp/data-raw")
setwd("~/smartsnp/data-raw")
# Data parameters
cellN <- 1e06
sampleN <- 100
snpN <- cellN/sampleN
# Random sample of genotypes /0|1|2/ and missing values /9/
sampleSNP <- sample(x = c(0,1,2,9), size = cellN, replace = TRUE, prob=c(0.33,0.33,0.33,0.01))
# Build dataset
dataSNP <- matrix(sampleSNP, nrow = snpN, ncol = sampleN)
dim(dataSNP)
#load package then try functions
devtools::load_all()
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue")
smart_pca(snp_data = dataSNP, sample_group = my_groups)
smart_pca(snp_data = dataSNP, sample_group = my_groups)
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
ls()
data(dataSNP)
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
smart_pca(snp_data = dataSNP, sample_group = my_groups)
smart_pca(snp_data = "dataSNP", sample_group = my_groups)
smart_pca(snp_data = dataSNP, sample_group = my_groups)
devtools::check()
?dir
devtools::load_all()
install.packages('devtools')
install.packages('Rtools')
R.Version()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
devtools::load_all()
devtools::load_all()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
roxygen2::roxygenize()
install.packages('roxygen2')
install.packages("roxygen2")
roxygen2::roxygenize()
install.packages("ggrepel")
roxygen2::roxygenize()
devtools::check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::spell_check()
roxygen2::roxygenize()
devtools::spell_check()
devtools::check()
devtools::load_all()
?smart_snp
?smart_pca
roxygen2::roxygenize()
devtools::load_all()
?smart_pca
getwd
getwd()
smart_pca(snp_data = "dataSNP")
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue")
pcaR1 <- smart_pca(snp_data = "dataSNP", sample_group = my_groups)
pcaR1$pca.eigenvalues
pcaR1$pca$pca.snp_loadings
pcaR1$pca.sample_coordinates
pcaR1$pca$pca.snp_loadings
length(pcaR1)
names(pcaR1)
pcaR1[2]
pcaR1[1]
pcaR1$pca.snp_loadings
pcaR1$pca.snp_loading
plot(pcaR1$pca.sample_coordinates[,c("PC1","PC2")], cex = 2,pch = 19, col = cols[as.factor(my_groups)], main = "genotype smartpca")
legend("topleft", legend = levels(as.factor(my_groups)), cex =1,pch = 19, col = cols, text.col = cols)
my_ancient <- c(1:10, 51:60)
pcaR2 <- smart_pca(snp_data = "dataSNP", sample_group = my_groups, sample_project = my_ancient)
pcaR2$pca.eigenvalues
pcaR2$pca.snp_loadings
pcaR2$pca.sample_coordinates
my_groups[my_ancient] <- "ancient"; cols = c("red", "black", "blue")
plot(pcaR2$pca.sample_coordinates[,c("PC1","PC2")],cex = 2, col = cols[as.factor(my_groups)], pch = 19, main = "genotype smartpca")
legend("topleft", legend = levels(as.factor(my_groups)),  cex = 1,pch = 19, col = cols, text.col = cols)
plot(pcaR1$pca.sample_coordinates[,c("PC1","PC2")], cex = 2,pch = 19, col = cols[as.factor(my_groups)], main = "genotype smartpca")
my_groups <- c(rep("A", 50), rep("B", 50)); cols = c("red", "blue")
pcaR1 <- smart_pca(snp_data = "dataSNP", sample_group = my_groups)
snp_eucli <- vegan::vegdist(pcaR1$pca.sample_coordinates[,c("PC1","PC2")], method = "euclidean")
permanova <- vegan::adonis(formula = snp_eucli ~ my_groups, permutations = 9999)
meanSqs <- as.matrix(t(permanova$aov.tab$MeanSqs[1:2]))
colnames(meanSqs) <- c("Groups", "Residuals")
par(mfrow = c(2,1), oma = c(0,5,0.1,0.1), lwd = 2)
barplot(meanSqs, horiz = TRUE, main = "PERMANOVA mean of squares",cex.names = 2, cex.main = 2, col = c("grey40"))
par(mar = c(5, 0.1, 3.5, 0.1))
anosimD <- vegan::anosim(snp_eucli, my_groups, permutations = 999)
plot(anosimD, xlab = "", ylab = "distance/similarity ranks",
main = "Inter-sample proximity ranks", cex.main =2, cex.axis = 2,
col = c("cyan", "red", "blue"))
par(mfrow = c(2,1), oma = c(0,5,0.1,0.1), lwd = 2)
barplot(meanSqs, horiz = TRUE, main = "PERMANOVA mean of squares",cex.names = 2, cex.main = 2, col = c("grey40"))
par(mar = c(5, 0.1, 1.5, 0.1))
plot(anosimD, xlab = "", ylab = "distance/similarity ranks",
main = "Inter-sample proximity ranks", cex.main =2, cex.axis = 2,
col = c("cyan", "red", "blue"))
pcaR1 <- smart_pca(snp_data = "dataSNP", sample_group = my_groups)
snp_eucli <- vegan::vegdist(pcaR1$pca.sample_coordinates[,c("PC1","PC2")], method = "euclidean")
disMed <- vegan::betadisper(d = snp_eucli, group = my_groups); disMed
par(mar = c(4, 4, 5, 0.1), lwd = 2)
boxplot(disMed, las =2, cex.axis = 2, cex.main = 1.5, horizontal = TRUE, varwidth = TRUE,
col = cols, xlab = "", ylab = "", main = "Sample distance to group spatial medians")
boxplot(disMed, las =2, cex.axis = 2, cex.main = 1.5, horizontal = TRUE, varwidth = TRUE,
col = cols, xlab = "", ylab = "", main = "Sample distance to group spatial medians")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::check()
roxygen2::roxygenize()
